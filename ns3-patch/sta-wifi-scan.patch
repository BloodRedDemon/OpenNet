diff -rpuN ns-3.21-backup/src/wifi/model/mac-low.cc ns-3.21/src/wifi/model/mac-low.cc
--- ns-3.21-backup/src/wifi/model/mac-low.cc	2014-12-02 20:51:56.816845932 +0800
+++ ns-3.21/src/wifi/model/mac-low.cc	2014-12-02 21:21:25.205993317 +0800
@@ -306,6 +306,7 @@ MacLow::MacLow ()
     m_endTxNoAckEvent (),
     m_currentPacket (0),
     m_listener (0),
+    m_enableSnr (false),
     m_phyMacLowListener (0),
     m_ctsToSelfSupported (false)
 {
@@ -566,6 +567,11 @@ MacLow::SetRxCallback (Callback<void,Ptr
   m_rxCallback = callback;
 }
 void
+MacLow::SetSnrRxCallback (Callback<void,Ptr<Packet>,const WifiMacHeader *,  double> callback)
+{
+  m_rxSnrCallback = callback;
+}
+void
 MacLow::RegisterDcfListener (MacLowDcfListener *listener)
 {
   m_dcfListeners.push_back (listener);
@@ -929,8 +935,16 @@ MacLow::ReceiveOk (Ptr<Packet> packet, d
 rxPacket:
   WifiMacTrailer fcs;
   packet->RemoveTrailer (fcs);
-  m_rxCallback (packet, &hdr);
-  return;
+   if (m_enableSnr)
+     {
+       NS_LOG_DEBUG ("enable snr receive " << m_enableSnr << rxSnr);
+       m_rxSnrCallback (packet, &hdr, rxSnr);
+     }
+   else
+     {
+       m_rxCallback (packet, &hdr);
+     }  
+   return;
 }
 
 uint32_t
@@ -2099,4 +2113,10 @@ MacLow::RegisterBlockAckListenerForAc (e
   m_edcaListeners.insert (std::make_pair (ac, listener));
 }
 
+void
+MacLow::EnableForwardSnr (bool enable)
+{
+  m_enableSnr = enable;
+}
+
 } // namespace ns3
diff -rpuN ns-3.21-backup/src/wifi/model/mac-low.h ns-3.21/src/wifi/model/mac-low.h
--- ns-3.21-backup/src/wifi/model/mac-low.h	2014-12-02 20:51:56.819845918 +0800
+++ ns-3.21/src/wifi/model/mac-low.h	2014-12-02 21:21:25.214993277 +0800
@@ -415,6 +415,7 @@ public:
    * typedef for a callback for MacLowRx
    */
   typedef Callback<void, Ptr<Packet>, const WifiMacHeader*> MacLowRxCallback;
+  typedef Callback<void, Ptr<Packet>, const WifiMacHeader*, double> MacLowSnrRxCallback;
 
   MacLow ();
   virtual ~MacLow ();
@@ -584,6 +585,13 @@ public:
    */
   void SetRxCallback (Callback<void,Ptr<Packet>,const WifiMacHeader *> callback);
   /**
+   * \param callback the callback which receives every incoming packet.
+   *
+   * This callback typically forwards incoming packets on scanning to
+   * an instance of ns3::MacRxMiddle.
+   */
+   void SetSnrRxCallback (Callback<void,Ptr<Packet>,const WifiMacHeader *, double> callback);
+ /**
    * \param listener listen to NAV events for every incoming
    *        and outgoing packet.
    */
@@ -683,6 +691,12 @@ public:
    * associated to this AC.
    */
   void RegisterBlockAckListenerForAc (enum AcIndex ac, MacLowBlockAckEventListener *listener);
+  /**
+   * \param enalbe if true enalbe forward snr otherwise don't
+   *
+   * Higher mac layer need sometimes snr information while forward up packet.
+   */
+  void EnableForwardSnr (bool enable);
 protected:
   /**
    * Return a TXVECTOR for the DATA frame given the destination.
@@ -867,7 +881,16 @@ private:
   Time CalculateOverallTxTime (Ptr<const Packet> packet,
                                const WifiMacHeader* hdr,
                                const MacLowTransmissionParameters &params) const;
-  void NotifyNav (Ptr<const Packet> packet,const WifiMacHeader &hdr, WifiMode txMode, WifiPreamble preamble);
+WifiMode GetRtsTxMode (Ptr<const Packet> packet, const WifiMacHeader *hdr) const;
+WifiMode GetDataTxMode (Ptr<const Packet> packet, const WifiMacHeader *hdr) const;
+WifiMode GetCtsTxModeForRts (Mac48Address to, WifiMode rtsTxMode) const;
+WifiMode GetAckTxModeForData (Mac48Address to, WifiMode dataTxMode) const;
+
+Time GetCtsDuration (Mac48Address to, WifiMode rtsTxMode) const;
+Time GetAckDuration (Mac48Address to, WifiMode dataTxMode) const;
+Time GetBlockAckDuration (Mac48Address to, WifiMode blockAckReqTxMode, enum BlockAckType type) const;
+void NotifyNav (const WifiMacHeader &hdr, WifiMode txMode, WifiPreamble preamble);  
+void NotifyNav (Ptr<const Packet> packet,const WifiMacHeader &hdr, WifiMode txMode, WifiPreamble preamble);
   /**
    * Reset NAV with the given duration.
    *
@@ -1076,6 +1099,7 @@ private:
   Ptr<WifiPhy> m_phy; //!< Pointer to WifiPhy (actually send/receives frames)
   Ptr<WifiRemoteStationManager> m_stationManager; //!< Pointer to WifiRemoteStationManager (rate control)
   MacLowRxCallback m_rxCallback; //!< Callback to pass packet up
+  MacLowSnrRxCallback m_rxSnrCallback;
   /**
    * typedef for an iterator for a list of MacLowDcfListener.
    */
@@ -1119,6 +1143,7 @@ private:
   Time m_lastNavDuration;  //!< The duration of the latest NAV
 
   bool m_promisc;  //!< Flag if the device is operating in promiscuous mode
+  bool m_enableSnr;
 
   class PhyMacLowListener * m_phyMacLowListener; //!< Listerner needed to monitor when a channel switching occurs.
 
diff -rpuN ns-3.21-backup/src/wifi/model/mac-rx-middle.cc ns-3.21/src/wifi/model/mac-rx-middle.cc
--- ns-3.21-backup/src/wifi/model/mac-rx-middle.cc	2014-12-02 20:51:56.818845923 +0800
+++ ns-3.21/src/wifi/model/mac-rx-middle.cc	2014-12-02 21:21:25.214993277 +0800
@@ -191,6 +191,13 @@ MacRxMiddle::SetForwardCallback (Forward
   m_callback = callback;
 }
 
+void
+MacRxMiddle::SetForwardSnrCallback (ForwardUpSnrCallback callback)
+{
+  NS_LOG_FUNCTION_NOARGS ();
+  m_snrCallback = callback;
+}
+
 OriginatorRxStatus *
 MacRxMiddle::Lookup (const WifiMacHeader *hdr)
 {
@@ -340,4 +347,47 @@ MacRxMiddle::Receive (Ptr<Packet> packet
   m_callback (agregate, hdr);
 }
 
+void
+MacRxMiddle::SnrReceive (Ptr<Packet> packet, const WifiMacHeader *hdr, double rxSnr)
+{
+  NS_LOG_FUNCTION (packet << hdr);
+  NS_ASSERT (hdr->IsData () || hdr->IsMgt ());
+  OriginatorRxStatus *originator = Lookup (hdr);
+  /**
+   * The check below is really uneeded because it can fail in a lot of
+   * normal cases. Specifically, it is possible for sequence numbers to
+   * loop back to zero once they reach 0xfff0 and to go up to 0xf7f0 in
+   * which case the check below will report the two sequence numbers to
+   * not have the correct order relationship.
+   * So, this check cannot be used to discard old duplicate frames. It is
+   * thus here only for documentation purposes.
+   */
+  if (!(SequenceNumber16 (originator->GetLastSequenceControl ()) < SequenceNumber16 (hdr->GetSequenceControl ())))
+    {
+      NS_LOG_DEBUG ("Sequence numbers have looped back. last recorded=" << originator->GetLastSequenceControl () <<
+                    " currently seen=" << hdr->GetSequenceControl ());
+    }
+  // filter duplicates.
+  if (IsDuplicate (hdr, originator))
+    {
+      NS_LOG_DEBUG ("duplicate from=" << hdr->GetAddr2 () <<
+                    ", seq=" << hdr->GetSequenceNumber () <<
+                    ", frag=" << hdr->GetFragmentNumber ());
+      return;
+    }
+  Ptr<Packet> agregate = HandleFragments (packet, hdr, originator);
+  if (agregate == 0)
+    {
+      return;
+    }
+  NS_LOG_DEBUG ("forwarding data from=" << hdr->GetAddr2 () <<
+                ", seq=" << hdr->GetSequenceNumber () <<
+                ", frag=" << hdr->GetFragmentNumber ());
+  if (!hdr->GetAddr1 ().IsGroup ())
+    {
+      originator->SetSequenceControl (hdr->GetSequenceControl ());
+    }
+  m_snrCallback (agregate, hdr, rxSnr);
+}
+
 } // namespace ns3
diff -rpuN ns-3.21-backup/src/wifi/model/mac-rx-middle.h ns-3.21/src/wifi/model/mac-rx-middle.h
--- ns-3.21-backup/src/wifi/model/mac-rx-middle.h	2014-12-02 20:51:56.816845932 +0800
+++ ns-3.21/src/wifi/model/mac-rx-middle.h	2014-12-02 21:21:25.215993272 +0800
@@ -44,6 +44,7 @@ public:
    * typedef for callback
    */
   typedef Callback<void, Ptr<Packet>, const WifiMacHeader*> ForwardUpCallback;
+  typedef Callback<void, Ptr<Packet>, const WifiMacHeader*,  double> ForwardUpSnrCallback;
 
   MacRxMiddle ();
   ~MacRxMiddle ();
@@ -54,8 +55,10 @@ public:
    * \param callback
    */
   void SetForwardCallback (ForwardUpCallback callback);
+  void SetForwardSnrCallback (ForwardUpSnrCallback callback);
 
   void Receive (Ptr<Packet> packet, const WifiMacHeader *hdr);
+  void SnrReceive (Ptr<Packet> packet, const WifiMacHeader *hdr, double rxSnr);
 private:
   friend class MacRxMiddleTest;
   /**
@@ -113,6 +116,7 @@ private:
   Originators m_originatorStatus;
   QosOriginators m_qosOriginatorStatus;
   ForwardUpCallback m_callback;
+  ForwardUpSnrCallback m_snrCallback;
 };
 
 } // namespace ns3
diff -rpuN ns-3.21-backup/src/wifi/model/sta-wifi-mac.cc ns-3.21/src/wifi/model/sta-wifi-mac.cc
--- ns-3.21-backup/src/wifi/model/sta-wifi-mac.cc	2014-12-02 20:51:56.815845937 +0800
+++ ns-3.21/src/wifi/model/sta-wifi-mac.cc	2014-12-02 21:21:25.215993272 +0800
@@ -26,6 +26,7 @@
 #include "ns3/string.h"
 #include "ns3/pointer.h"
 #include "ns3/boolean.h"
+#include "ns3/enum.h"
 #include "ns3/trace-source-accessor.h"
 
 #include "qos-tag.h"
@@ -60,6 +61,47 @@ NS_LOG_COMPONENT_DEFINE ("StaWifiMac");
 
 namespace ns3 {
 
+class PhyStaMacListener : public ns3::WifiPhyListener
+{
+public:
+  PhyStaMacListener (ns3::StaWifiMac *staMac)
+    : m_staMac (staMac)
+  {
+  }
+  virtual ~PhyStaMacListener ()
+  {
+  }
+  virtual void NotifyRxStart (Time duration)
+  {
+  }
+  virtual void NotifyRxEndOk (void)
+  {
+  }
+  virtual void NotifyRxEndError (void)
+  {
+  }
+  virtual void NotifyTxStart (Time duration)
+  {
+  }
+  virtual void NotifyTxStart (Time duration, double txPowerDbm)
+  {
+  }
+  virtual void NotifySleep (void){
+  }
+  virtual void NotifyWakeup (void){
+  }
+  virtual void NotifyMaybeCcaBusyStart (Time duration)
+  {
+    m_staMac->NotifyCcaBusyOccurred ();
+  }
+  virtual void NotifySwitchingStart (Time duration)
+  {
+    m_staMac->NotifySwitchingStartNow (duration);
+  }
+private:
+  ns3::StaWifiMac *m_staMac;
+};
+
 NS_OBJECT_ENSURE_REGISTERED (StaWifiMac);
 
 TypeId
@@ -86,6 +128,28 @@ StaWifiMac::GetTypeId (void)
                    BooleanValue (false),
                    MakeBooleanAccessor (&StaWifiMac::SetActiveProbing, &StaWifiMac::GetActiveProbing),
                    MakeBooleanChecker ())
+    .AddAttribute ("ScanType",
+                   "The type of scanning for a BSS.",
+                   EnumValue (NOTSUPPORT),
+                   MakeEnumAccessor (&StaWifiMac::m_scanType), 
+                   MakeEnumChecker (NOTSUPPORT, "NotSupport",
+                            ACTIVE, "Active",
+                                    PASSIVE, "Passive"))
+    .AddAttribute ("MaxScanningChannelNumber",
+                   "Specifies maximum number of channels that are examined when scanning for a BSS.",
+                   UintegerValue (11),
+                   MakeUintegerAccessor (&StaWifiMac::m_maxChannelNumber), 
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("MaxChannelTime",
+                   "The maximum time to spend on each channel when scanning.",
+                   TimeValue (Seconds (0.05)),
+                   MakeTimeAccessor (&StaWifiMac::m_maxChannelTime), 
+                   MakeTimeChecker ())
+    .AddAttribute ("MinChannelTime",
+                   "The minimum time to spend on each channel when scanning.",
+                   TimeValue (Seconds (0.02)),
+                   MakeTimeAccessor (&StaWifiMac::m_minChannelTime), 
+                   MakeTimeChecker ())
     .AddTraceSource ("Assoc", "Associated with an access point.",
                      MakeTraceSourceAccessor (&StaWifiMac::m_assocLogger))
     .AddTraceSource ("DeAssoc", "Association with an access point lost.",
@@ -98,10 +162,21 @@ StaWifiMac::StaWifiMac ()
   : m_state (BEACON_MISSED),
     m_probeRequestEvent (),
     m_assocRequestEvent (),
-    m_beaconWatchdogEnd (Seconds (0.0))
+    m_beaconWatchdogEnd (Seconds (0.0)),
+    m_scanType (NOTSUPPORT),
+    m_maxChannelTime (Seconds (0.0)),
+    m_minChannelTime (Seconds (0.0)),
+    m_maxChannelNumber (0),
+    m_scanChannelNumber (0),
+    m_bCcaBusyOccurred (false),
+    m_scanResults (std::vector<ScanningEntry> ())
 {
   NS_LOG_FUNCTION (this);
 
+  m_rxMiddle->SetForwardSnrCallback (MakeCallback (&StaWifiMac::SnrReceive, this));
+  m_low->SetSnrRxCallback (MakeCallback (&MacRxMiddle::SnrReceive, m_rxMiddle));
+
+
   // Let the lower layers know that we are acting as a non-AP STA in
   // an infrastructure BSS.
   SetTypeOfStation (STA);
@@ -112,6 +187,21 @@ StaWifiMac::~StaWifiMac ()
   NS_LOG_FUNCTION (this);
 }
 
+ void
+StaWifiMac::SetWifiPhy (Ptr<WifiPhy> phy)
+{
+  RegularWifiMac::SetWifiPhy (phy);
+  SetupStaMacListener (phy);
+}
+
+void
+StaWifiMac::DoDispose ()
+{
+  RegularWifiMac::DoDispose ();
+  delete m_phyStaMacListener;
+  m_phyStaMacListener = NULL;
+}
+
 void
 StaWifiMac::SetMaxMissedBeacons (uint32_t missed)
 {
@@ -275,6 +365,8 @@ StaWifiMac::TryToEnsureAssociated (void)
          association with a given ssid.
        */
       break;
+    case SCANNING:
+      break;
     }
 }
 
@@ -295,6 +387,27 @@ StaWifiMac::ProbeRequestTimeout (void)
 }
 
 void
+StaWifiMac::RunScanOrProbe (void)
+{
+    NS_LOG_FUNCTION (this << GetBssid ());
+    if (IsSupportScanning())
+      {
+        if (m_state != SCANNING)
+        {
+          NS_LOG_DEBUG ("start scanning");
+          SetState (SCANNING);
+          ScanningStart ();
+        }
+      }
+    else
+      {
+        NS_LOG_DEBUG ("beacon missed");
+        SetState (BEACON_MISSED);
+        TryToEnsureAssociated ();
+      } 
+}
+
+void
 StaWifiMac::MissedBeacons (void)
 {
   NS_LOG_FUNCTION (this);
@@ -308,9 +421,7 @@ StaWifiMac::MissedBeacons (void)
                                               &StaWifiMac::MissedBeacons, this);
       return;
     }
-  NS_LOG_DEBUG ("beacon missed");
-  SetState (BEACON_MISSED);
-  TryToEnsureAssociated ();
+  RunScanOrProbe();
 }
 
 void
@@ -345,7 +456,7 @@ StaWifiMac::Enqueue (Ptr<const Packet> p
   if (!IsAssociated ())
     {
       NotifyTxDrop (packet);
-      TryToEnsureAssociated ();
+      RunScanOrProbe();
       return;
     }
   WifiMacHeader hdr;
@@ -653,5 +764,181 @@ StaWifiMac::SetState (MacState value)
     }
   m_state = value;
 }
+void
+StaWifiMac::SetupStaMacListener (Ptr<WifiPhy> phy)
+{
+  m_phyStaMacListener = new PhyStaMacListener (this);
+  phy->RegisterListener (m_phyStaMacListener);
+}
+
+bool 
+StaWifiMac::IsSupportScanning (void) const
+{
+  return m_scanType != NOTSUPPORT;
+}
+
+void 
+StaWifiMac::NotifySwitchingStartNow (Time duration)
+{
+  Simulator::Schedule (duration,
+                       &StaWifiMac::ScanningSwitchChannelEnd, this);
+}
+
+void 
+StaWifiMac:: NotifyCcaBusyOccurred ()
+{
+  m_bCcaBusyOccurred = true;
+}
+
+void 
+StaWifiMac::ScanningStart(void)
+{
+  NS_LOG_FUNCTION (this);
+  m_probeRequestEvent.Cancel ();
+  m_beaconWatchdog.Cancel ();
+  m_scanChannelNumber = 0;
+  m_scanResults.clear ();
+  m_low->EnableForwardSnr (true);
+  m_bestAP = NULL;
+  Simulator::ScheduleNow (&StaWifiMac::ScanningSwitchChannelStart, this);
+}
+
+void 
+StaWifiMac::ScanningEnd(void)
+{
+  NS_LOG_FUNCTION (this);
+  m_low->EnableForwardSnr (false);
+
+  SetState (BEACON_MISSED);
+
+  uint32_t size = m_scanResults.size ();
+  if (size == 0)
+    {
+      NS_LOG_LOGIC ("cant scan for any ap.");
+      RunScanOrProbe ();
+    } 
+  else
+    {
+      NS_LOG_DEBUG ("scan result: number of aps is " << m_scanResults.size ());
+      m_bestAP = &m_scanResults[0];
+    
+      for (uint32_t i = 1; i < size; i++)
+        {
+          if (m_bestAP->rxSnr < m_scanResults[i].rxSnr)
+            {
+              m_bestAP = &m_scanResults[i];
+            }  
+        }
+      NS_LOG_DEBUG ("bestAP: " << m_bestAP->channelNumber << " " << m_bestAP->ssid << " " << m_bestAP->bssid);
+      m_phy->SetChannelNumber (m_bestAP->channelNumber);
+    }  
+}
+
+void
+StaWifiMac::ScanningSwitchChannelStart(void)
+{  
+  if (m_probeRequestEvent.IsRunning ())
+    {
+      m_probeRequestEvent.Cancel ();
+    }
+      
+  m_scanChannelNumber++;
+  NS_LOG_DEBUG ("switch to channel number:" << m_scanChannelNumber);
+  if(m_scanChannelNumber > m_maxChannelNumber)
+    {
+      ScanningEnd();
+    }
+  else
+    {
+      m_phy->SetChannelNumber (m_scanChannelNumber);
+    }
+}
+
+void
+StaWifiMac::ScanningSwitchChannelEnd(void)
+{
+    if (m_bestAP == NULL)
+      {
+        m_bCcaBusyOccurred = m_phy->IsStateCcaBusy ();
+  
+        if (m_scanType == ACTIVE)
+          {
+            SetSsid(Ssid());
+            SendProbeRequest();
+            m_scanChannelEvent = Simulator::Schedule (m_minChannelTime,
+                                 &StaWifiMac::ScanningMinChannelTimeout, this);
+          }
+        else if (m_scanType == PASSIVE)
+          {
+            m_scanChannelEvent = Simulator::Schedule (m_maxChannelTime,
+                                 &StaWifiMac::ScanningSwitchChannelStart, this);
+          }
+      }
+    else
+      {
+        SetSsid (m_bestAP->ssid);
+        SetState (WAIT_PROBE_RESP);
+        SendProbeRequest();          
+      } 
+}
+
+void 
+StaWifiMac::ScanningMinChannelTimeout(void)
+{
+  if (m_bCcaBusyOccurred && m_maxChannelTime > m_minChannelTime)
+    {
+      m_scanChannelEvent = Simulator::Schedule (m_maxChannelTime - m_minChannelTime,
+                           &StaWifiMac::ScanningSwitchChannelStart, this);
+    }
+  else
+    {
+      Simulator::ScheduleNow (&StaWifiMac::ScanningSwitchChannelStart, this);
+    }
+}
+
+void 
+StaWifiMac::SnrReceive (Ptr<Packet> packet, const WifiMacHeader *hdr, double rxSnr)
+{
+  NS_LOG_FUNCTION (this << packet << hdr << rxSnr << GetAddress () << hdr->GetAddr3 () << hdr->GetAddr1 ());
+  NS_ASSERT (!hdr->IsCtl ());
+  
+  ScanningEntry entry;
+  if (hdr->GetAddr3 () == GetAddress ())
+    {
+      NS_LOG_LOGIC ("packet sent by us.");
+      return;
+    }
+  else if (hdr->GetAddr1 () != GetAddress ())
+    {
+      NS_LOG_LOGIC ("packet is not for us");
+      NotifyRxDrop (packet);
+      return;
+    }
+   else if (hdr->IsBeacon ())
+    {
+      MgtBeaconHeader beacon;
+      packet->RemoveHeader (beacon);
+      
+      entry.ssid = beacon.GetSsid ();
+      
+    }
+  else if (hdr->IsProbeResp ())
+    {    
+        MgtProbeResponseHeader probeResp;
+        packet->RemoveHeader (probeResp);
+        
+        entry.ssid = probeResp.GetSsid ();        
+    }
+  else
+    {
+      NotifyRxDrop (packet);
+      return;
+    }
+    
+  entry.channelNumber = m_scanChannelNumber;
+  entry.bssid = hdr->GetAddr3 ();
+  entry.rxSnr = rxSnr;
+  m_scanResults.push_back (entry);
+}
 
 } // namespace ns3
diff -rpuN ns-3.21-backup/src/wifi/model/sta-wifi-mac.h ns-3.21/src/wifi/model/sta-wifi-mac.h
--- ns-3.21-backup/src/wifi/model/sta-wifi-mac.h	2014-12-02 20:51:56.815845937 +0800
+++ ns-3.21/src/wifi/model/sta-wifi-mac.h	2014-12-02 21:21:25.215993272 +0800
@@ -43,6 +43,23 @@ class MgtAddBaRequestHeader;
 class StaWifiMac : public RegularWifiMac
 {
 public:
+
+  enum MacScanType
+  {
+    NOTSUPPORT,
+    ACTIVE,
+    PASSIVE
+  };
+
+  struct ScanningEntry
+  {
+    uint16_t channelNumber;
+    Ssid ssid;
+    Mac48Address bssid;
+    double rxSnr;
+  };
+  typedef Callback<void, std::vector<ScanningEntry> const & > ScanningCallback;
+
   static TypeId GetTypeId (void);
 
   StaWifiMac ();
@@ -57,7 +74,10 @@ public:
    * access is granted to this MAC.
    */
   virtual void Enqueue (Ptr<const Packet> packet, Mac48Address to);
-
+  /**
+   * \param phy the physical layer attached to this MAC.
+   */
+  virtual void SetWifiPhy (Ptr<WifiPhy> phy);
   /**
    * \param missed the number of beacons which must be missed
    * before a new association sequence is started.
@@ -83,6 +103,23 @@ public:
    */
   void StartActiveAssociation (void);
 
+  /**
+   * \param duration switching delay duration.
+   *
+   * This method is typically invoked by the PhyMacLowListener to notify
+   * the MAC layer that a channel switching occured. When a channel switching
+   * occurs, pending MAC transmissions (RTS, CTS, DATA and ACK) are cancelled.
+   */
+  void NotifySwitchingStartNow (Time duration);
+  /**
+   * This method is typically invoked by the PhyMacLowListener to notify
+   * the MAC layer that CCA(Clear Channel Assessment) becomes busy
+   */
+  void NotifyCcaBusyOccurred ();
+
+protected:  
+  virtual void DoDispose ();
+
 private:
   /**
    * The current MAC state of the STA.
@@ -93,7 +130,8 @@ private:
     WAIT_PROBE_RESP,
     WAIT_ASSOC_RESP,
     BEACON_MISSED,
-    REFUSED
+    REFUSED,
+    SCANNING
   };
 
   /**
@@ -178,6 +216,15 @@ private:
    */
   HtCapabilities GetHtCapabilities (void) const;
 
+  void SetupStaMacListener (Ptr<WifiPhy> phy);
+  bool IsSupportScanning (void) const;
+  void ScanningStart (void);
+  void ScanningEnd (void);
+  void ScanningSwitchChannelStart (void);
+  void ScanningSwitchChannelEnd (void);
+  void ScanningMinChannelTimeout (void);
+  virtual void SnrReceive (Ptr<Packet> packet, const WifiMacHeader *hdr, double rxSnr);
+  void RunScanOrProbe (void);
 
   enum MacState m_state;
   Time m_probeRequestTimeout;
@@ -189,6 +236,17 @@ private:
   uint32_t m_maxMissedBeacons;
   bool m_activeProbing;
 
+  class PhyStaMacListener * m_phyStaMacListener;
+  MacScanType m_scanType;
+  Time m_maxChannelTime;
+  Time m_minChannelTime;
+  uint16_t m_maxChannelNumber;
+  uint16_t m_scanChannelNumber;
+  bool m_bCcaBusyOccurred;
+  std::vector<ScanningEntry> m_scanResults;
+  EventId m_scanChannelEvent;
+  ScanningEntry* m_bestAP;
+
   TracedCallback<Mac48Address> m_assocLogger;
   TracedCallback<Mac48Address> m_deAssocLogger;
 };
