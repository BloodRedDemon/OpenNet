diff -ur original/ns-3.18/src/tap-bridge/model/tap-bridge.cc ns-3.18/src/tap-bridge/model/tap-bridge.cc
--- original/ns-3.18/src/tap-bridge/model/tap-bridge.cc  2013-11-05 02:26:52.000000000 +0800
+++ ns-3.18/src/tap-bridge/model/tap-bridge.cc  2013-11-05 02:39:07.000000000 +0800
@@ -696,14 +696,6 @@
   //
 
   //
-  // First, create a packet out of the byte buffer we received and free that
-  // buffer.
-  //
-  Ptr<Packet> packet = Create<Packet> (reinterpret_cast<const uint8_t *> (buf), len);
-  std::free (buf);
-  buf = 0;
-
-  //
   // Make sure the packet we received is reasonable enough for the rest of the 
   // system to handle and get it ready to be injected directly into an ns-3
   // device.  What should come back is a packet with the Ethernet header 
@@ -714,7 +706,9 @@
 
   NS_LOG_LOGIC ("Received packet from tap device");
 
-  Ptr<Packet> p = Filter (packet, &src, &dst, &type);
+  Ptr<Packet> p = Filter (buf, len, &src, &dst, &type);
+  std::free (buf);
+  buf = 0;
   if (p == 0)
     {
       NS_LOG_LOGIC ("TapBridge::ForwardToBridgedDevice:  Discarding packet as unfit for ns-3 consumption");
@@ -795,9 +789,9 @@
 }
 
 Ptr<Packet>
-TapBridge::Filter (Ptr<Packet> p, Address *src, Address *dst, uint16_t *type)
+TapBridge::Filter (uint8_t *buf, ssize_t len, Address *src, Address *dst, uint16_t *type)
 {
-  NS_LOG_FUNCTION (p);
+  NS_LOG_FUNCTION (buf << len);
   uint32_t pktSize;
 
   //
@@ -806,14 +800,19 @@
   // enough to hold an EthernetHeader.  If it can't, we signify the packet 
   // should be filtered out by returning 0.
   //
-  pktSize = p->GetSize ();
+  pktSize = len;
   EthernetHeader header (false);
   if (pktSize < header.GetSerializedSize ())
     {
       return 0;
     }
 
-  p->RemoveHeader (header);
+  Buffer buffer = Buffer ();
+  buffer.AddAtStart (pktSize);
+  buffer.Begin ().Write (buf, pktSize);
+  header.Deserialize (buffer.Begin ());
+  buffer.RemoveAtStart (header.GetSerializedSize ());
+  pktSize -= header.GetSerializedSize ();
 
   NS_LOG_LOGIC ("Pkt source is " << header.GetSource ());
   NS_LOG_LOGIC ("Pkt destination is " << header.GetDestination ());
@@ -830,14 +829,16 @@
       *src = header.GetSource ();
       *dst = header.GetDestination ();
 
-      pktSize = p->GetSize ();
+      pktSize = buffer.GetSize ();
       LlcSnapHeader llc;
       if (pktSize < llc.GetSerializedSize ())
         {
           return 0;
         }
 
-      p->RemoveHeader (llc);
+      header.Serialize (buffer.Begin ());
+      buffer.RemoveAtStart (llc.GetSerializedSize ());
+      pktSize -= llc.GetSerializedSize ();
       *type = llc.GetType ();
     }
   else
@@ -852,6 +853,7 @@
   // possible llc/snap header) on it.  We think it is ready to send on
   // out the bridged net device.
   //
+  Ptr<Packet> p = Create<Packet> (reinterpret_cast<const uint8_t *> (buffer.PeekData()), pktSize);
   return p;
 }

diff -ur original/ns-3.18/src/tap-bridge/model/tap-bridge.h ns-3.18/src/tap-bridge/model/tap-bridge.h
--- original/ns-3.18/src/tap-bridge/model/tap-bridge.h  2013-11-05 02:26:52.000000000 +0800
+++ ns-3.18/src/tap-bridge/model/tap-bridge.h  2013-11-05 02:29:31.000000000 +0800
@@ -265,7 +265,7 @@
    *
    * \param buf A character buffer containing the actual packet bits that were
    *            received from the host.
-   * \param buf The length of the buffer.
+   * \param len The length of the buffer.
    */
   void ForwardToBridgedDevice (uint8_t *buf, ssize_t len);
 
@@ -273,11 +273,12 @@
    * \internal
    *
    * The host we are bridged to is in the evil real world.  Do some sanity
-   * checking on a received packet to make sure it isn't too evil for our
+   * checking on a received buffer to make sure it isn't too evil for our
    * poor naive virginal simulator to handle.
    *
-   * \param packet The packet we received from the host, and which we need 
-   *               to check.
+   * \param buf    A character buffer containing the actual packet bits that were
+   *               received from the host.
+   * \param len    The length of the buffer.
    * \param src    A pointer to the data structure that will get the source
    *               MAC address of the packet (extracted from the packet Ethernet
    *               header).
@@ -289,7 +290,7 @@
    *               (DIX framing) or from the 802.2 LLC header in the case of 
    *               length interpretation (802.3 framing).
    */
-  Ptr<Packet> Filter (Ptr<Packet> packet, Address *src, Address *dst, uint16_t *type);
+  Ptr<Packet> Filter (uint8_t *buf, ssize_t len, Address *src, Address *dst, uint16_t *type);
 
   /**
    * \internal

